#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""OpenBMP mrt2bmp

  Copyright (c) 2013-2016 Cisco Systems, Inc. and others.  All rights reserved.
  This program and the accompanying materials are made available under the
  terms of the Eclipse Public License v1.0 which accompanies this distribution,
  and is available at http://www.eclipse.org/legal/epl-v10.html
"""

import getopt
import yaml
import logging
import time
import sys
import signal
from multiprocessing import Queue, Manager, Lock

from mrt2bmp.logger import LoggerThread
from mrt2bmp.MrtProcessors import RouteViewsProcessor
from mrt2bmp.RouteDataSynchronizer import RouteDataSynchronizer
from mrt2bmp.RipeSynchronizer import RipeSynchronizer

# Root logger
LOG = None

# Running flag for main process
RUNNING = True

# Route views is running.
USE_ROUTE_VIEWS = False

# Ripe data is running
USE_RIPE = False

# Default App name
APP_NAME = "openbmp-mrt2bmp"

def signal_handler(signum, frame):
    """ Signal handler to shutdown the program

        :param signum:          Signal number
        :param frame:           Stack
    """
    global RUNNING, LOG

    if LOG:
        LOG.info("Caught signal %d, exiting", signum)
    else:
        print ("Caught signal %d, exiting" % signum)

    RUNNING = False

def load_config(cfg_filename, LOG):
    """ Load and validate the configuration from YAML

        Some defaults are applied if any settings are missing.

        :param cfg_filename:    Configuration filename to load
        :param LOG:             logger

        :return: Configuration dictionary is returned
    """
    cfg = {}

    try:
        with open(cfg_filename,'r') as yaml_file:
            cfg = yaml.load(yaml_file, Loader=yaml.FullLoader)

        if 'collector' in cfg:
            if 'host' not in cfg['collector']:
                if LOG:
                    LOG.error("Configuration is missing 'host' in collector section")
                else:
                    print ("Configuration is missing 'host' in collector section")
                sys.exit(2)

            if 'port' not in cfg['collector']:
                if LOG:
                    LOG.error("Configuration is missing 'port' in collector section, using default of 5000")
                else:
                    print ("Configuration is missing 'port' in collector section, using default of 5000")

                cfg['collector']['port'] = 5000

        else:
            if LOG:
                LOG.error("Configuration is missing 'collector' section.")
            else:
                print ("Configuration is missing 'collector' section.")
            sys.exit(2)

        if 'logging' not in cfg:
            if LOG:
                LOG.error("Configuration is missing 'logging' section.")
            else:
                print ("Configuration is missing 'logging' section.")
            sys.exit(2)

    except (IOError, yaml.YAMLError) as e:
        print ("Failed to load mapping config file '%s': %r" % (cfg_filename, e))
        #if hasattr(e, 'problem_mark'):
            #mark = e.problem_mark
            #print ("error on line: %s, column: %s" % (mark.line+1, mark.column+1))

        sys.exit(2)

    return cfg

def usage(prog):

    """ Usage - Prints the usage for this program.

        :param prog:  Program name
    """
    print ("")
    print ("Usage: %s [OPTIONS]" % prog)
    print ("")

    print ("OPTIONS:")
    print ("  -h, --help".ljust(30) + "Print this help menu")
    print ("  -c, --config".ljust(30) + "Config filename (default is %s/etc/openbmp-mrt2bmp.yml)" % sys.prefix)
    print ("  -r, --router".ljust(30) + "Router name which you want to run with your MRT files")
    print ("  --rv, --routeviews".ljust(30) + "Router name which you want to run from routeviews.org")
    print ("  --rv list, --routeviews list".ljust(30) + "Print name of routers from routeviews.org")
    print ("  --rp, --ripe".ljust(30) + "Router name which you want to run from RIPE")
    print ("  --rp list, --ripe list".ljust(30) + "Print name of routers from RIPE")
    print ("")

def parse_cmd_args(argv):
    """ Parse commandline arguments and load the configuration file

        Usage is printed and program is terminated if there is an error.

        :param argv:   ARGV as provided by sys.argv.  Arg 0 is the program name

        :returns: Command line arg configuration dictionary
    """
    cfg = {
            'cfg_filename': "%s/etc/%s.yml" % (sys.prefix, APP_NAME)
           }

    global USE_ROUTE_VIEWS
    global USE_RIPE

    try:
        (opts, args) = getopt.getopt(argv[1:], "hc:r:r:",["help", "config=", "routeviews=", "rv=", "rp="])

        for o, a in opts:
            if o in ("-h", "--help"):
                usage(argv[0])
                sys.exit(0)

            elif o in ("-c", "--config"):
                cfg['cfg_filename'] = a

            elif o in ("--rv", "--routeviews"):

                list_of_routers = RouteDataSynchronizer.getListOfRouters("http://routeviews.org")

                if a == "list":
                    # Print list of routers from routeviews.org
                    print ("List of routers from routeviews.org")

                    for r in list_of_routers:
                        print ("- %s" % r[0])

                    sys.exit(0)

                else:
                    router_exists = False

                    for r, k in list_of_routers:
                        if r == a:
                            router_exists = True

                    if not router_exists:
                        print("'%s' is not a valid router on routeviews.org" % a)
                        sys.exit(2)

                    cfg['router_name'] = a
                    USE_ROUTE_VIEWS = True

            elif o in ("--rp", "--ripe"):

                print ("Ripe is chosen...")
                list_of_routers = []

                if a[:5] == "list-":
                    list_of_routers = RipeSynchronizer.getListOfRouters(a[5:])

                    # Print list of routers from routeviews.org
                    print ("List of routers from ripe.net")

                    for r in list_of_routers:
                        print ("- %s" % r[0])

                    sys.exit(0)

                else:
                    cfg['router_name'] = a
                    USE_RIPE = True

            elif o in ("-r", "--router"):
                cfg['router_name'] = a

                USE_ROUTE_VIEWS = False

                # If router is blank, then error out.
                if cfg['router_name'].strip() == "":
                    raise getopt.GetoptError

            else:
                usage(argv[0])
                sys.exit(1)

    except getopt.GetoptError as err:
        print (str(err))  # will print something like "option -a not recognized"
        usage(argv[0])
        sys.exit(2)

    return cfg


def main():
    """ Main entry point """
    global LOG, RUNNING

    cmd_cfg = parse_cmd_args(sys.argv)
    cfg = load_config(cmd_cfg['cfg_filename'], LOG)

    router_name = cmd_cfg['router_name']

    # Shared dictionary between processes
    manager = Manager()
    cfg_dict = manager.dict()
    cfg_dict['collector'] = cfg['collector']
    cfg_dict['router_data'] = cfg['router_data']
    cfg_dict['logging'] = cfg['logging']

    # Setup signal handlers
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGQUIT, signal_handler)
    signal.signal(signal.SIGABRT, signal_handler)

    # Setup the multiprocessing logging queue-
    log_queue = Queue()
    cfg_logging = cfg_dict['logging']

    # Log file is named with router name.
    cfg_logging['handlers']['file']['filename'] = "openbmp-mrt2bmp_" + router_name + ".log"
    thread_logger = LoggerThread(log_queue, cfg_logging)
    thread_logger.start()

    # Use manager queue to ensure no duplicates
    fwd_queue = manager.Queue(cfg_dict['router_data']['max_queue_size'])

    # Create the mutex.
    sync_mutex = Lock()

    rds = None
    ris = None

    global USE_ROUTE_VIEWS
    if USE_ROUTE_VIEWS:
        # Start the Router views data sync
        rds = RouteDataSynchronizer(cfg_dict, log_queue, sync_mutex, router_name)
        rds.start()

    global USE_RIPE
    if USE_RIPE:
        # Start the Ripe data sync
        ris = RipeSynchronizer(cfg_dict, log_queue, sync_mutex, router_name)
        ris.start()

    # Start the Router Views process
    rwp = RouteViewsProcessor(router_name, cfg_dict, log_queue, fwd_queue, sync_mutex)
    rwp.start()

    # Monitor/do something else if needed
    while RUNNING:

        try:

            time.sleep(3)

        except KeyboardInterrupt:
            print ("\nStop requested by user")
            RUNNING = False
            break

    if rwp.is_alive():
        rwp.stop()
        time.sleep(1)

    if rds is not None:
        rds.stop()
        time.sleep(1)

    if ris is not None:
        ris.stop()
        time.sleep(1)

    manager.shutdown()

    thread_logger.stop()
    thread_logger.join()

    print ("Openbmp Mrt2Bmp is finished")

    sys.exit(0)

if __name__ == '__main__':
    main()